diff --git a/input/ffms.c b/input/ffms.c
index f34f85d0..54b0edc0 100644
--- a/input/ffms.c
+++ b/input/ffms.c
@@ -118,7 +118,7 @@ static int open_file( char *psz_filename, hnd_t *p_handle, video_info_t *info, c
 
     int trackno = FFMS_GetFirstTrackOfType( idx, FFMS_TYPE_VIDEO, &e );
     if( trackno >= 0 )
-        h->video_source = FFMS_CreateVideoSource( psz_filename, trackno, idx, 1, seekmode, &e );
+        h->video_source = FFMS_CreateVideoSource( psz_filename, trackno, idx, opt->demuxer_threads, seekmode, &e );
     FFMS_DestroyIndex( idx );
 
     FAIL_IF_ERROR( trackno < 0, "could not find video track\n" );
diff --git a/input/input.h b/input/input.h
index 70b66545..c7e2e3b3 100644
--- a/input/input.h
+++ b/input/input.h
@@ -48,6 +48,7 @@ typedef struct
     int output_csp; /* convert to this csp, if applicable */
     int output_range; /* user desired output range */
     int input_range; /* user override input range */
+    int demuxer_threads;
 } cli_input_opt_t;
 
 /* properties of the source given by the demuxer */
diff --git a/input/lavf.c b/input/lavf.c
index b5bd0b81..f7b4fff4 100644
--- a/input/lavf.c
+++ b/input/lavf.c
@@ -211,6 +211,7 @@ static int open_file( char *psz_filename, hnd_t *p_handle, video_info_t *info, c
     /* lavf is thread unsafe as calling av_read_frame invalidates previously read AVPackets */
     info->thread_safe  = 0;
     h->vfr_input       = info->vfr;
+    h->lavc->thread_count    = opt->demuxer_threads;
     FAIL_IF_ERROR( avcodec_open2( h->lavc, avcodec_find_decoder( h->lavc->codec_id ), NULL ),
                    "could not find decoder for video stream\n" );
 
diff --git a/x264.c b/x264.c
index b86f6744..5a930d44 100644
--- a/x264.c
+++ b/x264.c
@@ -1007,6 +1007,7 @@ static void help( x264_param_t *defaults, int longhelp )
     H1( "      --ssim                  Enable SSIM computation\n" );
     H1( "      --threads <integer>     Force a specific number of threads\n" );
     H2( "      --lookahead-threads <integer> Force a specific number of lookahead threads\n" );
+    H2( "      --demuxer-threads <integer> Force a specific number of threads for demuxer (lavf, ffms)\n" );
     H2( "      --sliced-threads        Low-latency but lower-efficiency threading\n" );
     H2( "      --thread-input          Run Avisynth in its own thread\n" );
     H2( "      --sync-lookahead <integer> Number of buffer frames for threaded lookahead\n" );
@@ -1067,6 +1068,7 @@ typedef enum
     OPT_LOG_LEVEL,
     OPT_LOG_FILE,
     OPT_LOG_FILE_LEVEL,
+    OPT_DEMUXER_THREADS,
     OPT_VIDEO_FILTER,
     OPT_INPUT_FMT,
     OPT_INPUT_RES,
@@ -1187,6 +1189,7 @@ static struct option long_options[] =
     { "qpfile",               required_argument, NULL, OPT_QPFILE },
     { "threads",              required_argument, NULL, 0 },
     { "lookahead-threads",    required_argument, NULL, 0 },
+    { "demuxer-threads",      required_argument, NULL, OPT_DEMUXER_THREADS },
     { "sliced-threads",       no_argument,       NULL, 0 },
     { "no-sliced-threads",    no_argument,       NULL, 0 },
     { "slice-max-size",       required_argument, NULL, 0 },
@@ -1567,6 +1570,9 @@ static int parse( int argc, char **argv, x264_param_t *param, cli_opt_t *opt )
             case OPT_THREAD_INPUT:
                 b_thread_input = 1;
                 break;
+            case OPT_DEMUXER_THREADS:
+                input_opt.demuxer_threads = atoi( optarg );
+                break;
             case OPT_QUIET:
                 cli_log_level = param->i_log_level = X264_LOG_NONE;
                 break;
@@ -1730,6 +1736,7 @@ generic_option:
     input_opt.seek = opt->i_seek;
     input_opt.progress = opt->b_progress;
     input_opt.output_csp = output_csp;
+    input_opt.demuxer_threads = x264_clip3( input_opt.demuxer_threads, 1, X264_THREAD_MAX );
 
     if( select_input( demuxer, demuxername, input_filename, &opt->hin, &info, &input_opt ) )
         return -1;
